
* Configuration
:PROPERTIES:
:VISIBILITY: children
:END:

** Table of Contents :TOC_4_gh:
- [[#configuration][Configuration]]
  - [[#about-this-file][About this file]]
  - [[#org-file-tweaks][Org File Tweaks]]
    - [[#automatically-tangle][Automatically Tangle]]
    - [[#visibility-settings][Visibility Settings]]
    - [[#table-of-contents][Table of Contents]]
  - [[#emacs-initialization][Emacs Initialization]]
    - [[#settings][Settings]]
    - [[#package-management][Package Management]]
      - [[#package-settings][Package Settings]]
      - [[#use-package-settings][Use-Package Settings]]
  - [[#packages][Packages]]
    - [[#evil][Evil]]
    - [[#general][General]]
    - [[#the-doom-trilogy][The Doom Trilogy]]
    - [[#no-littering][No-Littering]]
    - [[#misc-font-lock-minor-modes][Misc font-lock minor modes]]
    - [[#eldoc][ElDoc]]
    - [[#which-key][Which-key]]
    - [[#ivy][Ivy]]
    - [[#counsel][Counsel]]
    - [[#swiper][Swiper]]
    - [[#treemacs][Treemacs]]
    - [[#magit][Magit]]
    - [[#projectile][Projectile]]
    - [[#company][Company]]
    - [[#language-server-protocol][Language Server Protocol]]
    - [[#org][Org]]
    - [[#toc-org][Toc-org]]
    - [[#language--file-support][Language & File Support]]
      - [[#bash][Bash]]
      - [[#css][CSS]]
      - [[#emacs-lisp][Emacs Lisp]]
      - [[#html][HTML]]
      - [[#typescript][TypeScript]]
  - [[#post-initialization][Post Initialization]]

** About this file
This is an Emacs literate configuration template. It contains the basic structure
of a literate config along with some optimizations to ensure a fast load time.

It is based off of gilbertw1's emacs-literate starter.

** Org File Tweaks
There are a few tweaks included in this org file that make it a little easier to
work with.

*** Automatically Tangle
First there is a property defined on the file:

#+BEGIN_SRC :tangle no
header-args :tangle yes
#+END_SRC

This tells emacs to automatically tangle (include) all code blocks in this file when
generating the code for the config, unless the code block explicitly includes
=:tangle no= as the above code block does.

*** Visibility Settings
Next there's a property defined on the [[Configuration][Configuration]] heading that defines the visibility
that tells org to show it's direct children on startup. This way a clean outline of all
sub headings under Configuration is shown each time this file is opened in org-mode.

*** Table of Contents
Finally, there is a [[Table of Contents][Table of Contents]] heading that includes the tag: =:TOC_4_gh:=. This
tells an org-mode package =toc-org= to generate a table of contents under this heading
that has a max depth of 3 and is created using Github-style hrefs. This table of contents
is updated everytime the file is saved and makes for a functional table of contents that
works property directly on github.

** Emacs Initialization
*** Settings
Increase the gc-cons-threshold to a very high number to decrease the load and compile time.
Should be brought back down after initialization has completed. Keeping this value too high
will result in long GC pauses during normal usage.

#+BEGIN_SRC emacs-lisp
(eval-and-compile
  (setq gc-cons-threshold 402653184
        gc-cons-percentage 0.6))
#+END_SRC

Avoid loading stale byte-compiled files. Important for live-reloading the config.
#+BEGIN_SRC emacs-lisp
(setq load-prefer-newer t)
#+END_SRC

Disable certain byte compiler warnings to cut down on the noise. This is a personal choice and can be removed
if you would like to see any and all byte compiler warnings.

#+BEGIN_SRC emacs-lisp
(setq byte-compile-warnings '(not free-vars unresolved noruntime lexical make-local))
#+END_SRC

Tabula rasa...

Clear away all the visual noise. Toolbars, menus, scrollbars and the like.
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(when (fboundp 'tool-bar-mode)
  (tool-bar-mode -1))
(when (fboundp 'scroll-bar-mode)
  (scroll-bar-mode -1))
(when (fboundp 'horizontal-scroll-bar-mode)
  (horizontal-scroll-bar-mode -1))
(when (fboundp 'fringe-mode)
(fringe-mode 2))
#+END_SRC

Miscellaneous preferences...
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p) ; just type y or n for yes and no in prompts
(column-number-mode) ; show the column number in the modeline
(setq-default cursor-in-non-selected-windows nil) ; only show cursor in active window
#+END_SRC

*** Package Management
**** Package Settings
Instead of =use-package=, use straight, a purely functional package manager for Emacs.
It allows for a reproducible config across machines, because it has a lock-file. Additionally, it makes
it easy to use packages from various sources (like git repos), and dead simple to modify those sources
and potentially commit those changes upstream.

Gotta bootstrap it first to use it, using the =straight-strap.el= file.
#+BEGIN_SRC emacs-lisp
    (let ((bootstrap-file
	(expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 4))
    (unless (file-exists-p bootstrap-file)
	(load-file (expand-file-name "straight-strap.el" user-emacs-directory)))
    (load bootstrap-file nil 'nomessage))
#+END_SRC

**** Use-Package Settings
Tell =use-package= to always use =straight= for acquiring packages.
This also adds the =:straight= key to the =use-package= form, so it can understand straight recipes.

#+BEGIN_SRC emacs-lisp
  (straight-use-package 'use-package)
  (require 'use-package)
  (require 'straight)
  (setq straight-use-package-by-default t)
  ; don't check for modifications on startup -- has a big impact on load time
  (setq straight-check-for-modifications 'live)
  (setq straight-cache-autoloads t)
#+END_SRC

** Packages
*** Evil
Step 0: Be Evil.

I not only require it, I =:demand= it, because I seriously don't know any of Emacs' native key-bindings.

#+BEGIN_SRC emacs-lisp
(use-package evil
  :demand t
  :init
  (setq evil-want-integration nil)
  :config
  (evil-mode 1))

(use-package evil-collection
  :demand t
  :after evil
  :custom
  (evil-collection-setup-minibuffer t)
  :config
  (evil-collection-init))
#+END_SRC

*** General
Step 1: Be evil, but more generally.

Install a powerful General to beat all those foreign key-bindings into submission.
One General to bind them, and a great <SPC>-leader to guide them.

#+BEGIN_SRC emacs-lisp
(defvar leader-key "SPC")

(defun reload-config ()
    (interactive)
    (straight-transaction
        (straight-mark-transaction-as-init)
	(message "Reloading config...")
	(require 'org)
	(org-babel-tangle-file "emacs.org")
	(load-file "~/.emacs.d/emacs.el")
        (message "Reloading config... done.")))
    
(defun edit-config ()
    (interactive)
    (find-file "~/.emacs.d/emacs.org"))

(use-package general
  :demand t
  :config
  (general-define-key
   :states '(normal visual insert emacs)
   :prefix leader-key
   :non-normal-prefix "C-SPC"

   ;; Top level
   "R"   '(reload-config :which-key "reload emacs")
   "?"   '(iterm-goto-filedir-or-home :which-key "iterm - goto dir")
   "/"   '(counsel-ag :which-key "counsel search")
   ";"   '(counsel-M-x :which-key "M-x")
   "SPC" '(switch-to-other-buffer :which-key "prev buffer")
   "." '(avy-goto-word-or-subword-1  :which-key "go to char")

   ;; Files
   "f"  '(:ignore t :which-key "Files")
   "ff" '(counsel-find-file :which-key "find file")
   "fs" '(swiper :which-key "search in file")
   "fe" '(edit-config :which-key "edit emacs config")

   ;; Buffers
   "b"  '(:ignore t :which-key "Buffers")
   "bb" '(ivy-switch-buffer :which-key "swap buffer")

   ;; Applications
   "a" '(:ignore t :which-key "Applications")
   "ae" '(eshell :which-key "eshell")
   "as" '(shell :which-key "shell")
   
   ;; Toggles
   "t" '(:ignore t :which-key "Toggles")
   "td" '(toggle-debug-on-error :which-key "debug on error")
   "tn" '(linum-mode :which-key "line numbers")

   ;; Windows
   "w"  '(:ignore t :which-key "Windows")
   "w/" '(evil-window-vsplit :which-key "vsplit")
   "w-" '(evil-window-split :which-key "split")
   "wj" '(evil-window-down :which-key "nav down")
   "wk" '(evil-window-up :which-key "nav up")
   "wh" '(evil-window-left :which-key "nav left")
   "wl" '(evil-window-right :which-key "nav right")
   "wJ" '(evil-window-move-very-bottom :which-key "move down")
   "wK" '(evil-window-move-very-top :which-key "move up")
   "wH" '(evil-window-move-far-left :which-key "move left")
   "wL" '(evil-window-move-far-right :which-key "move right")
   ))
#+END_SRC

*** The Doom Trilogy
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
    :preface (defvar region-fg nil) ;workaround
    :config
    (load-theme 'doom-dracula t)
    (doom-themes-visual-bell-config)
    (doom-themes-org-config))
    
(use-package solaire-mode
    :hook ((change-major-mode after-revert ediff-prepare-buffer) . turn-on-solaire-mode)
    :config
  (add-hook 'minibuffer-setup-hook #'solaire-mode-in-minibuffer)
  (solaire-mode-swap-bg))
 
(use-package eldoc-eval :demand t)
(use-package shrink-path :demand t)
(use-package all-the-icons :demand t)

(use-package doom-modeline
    :demand t
    :straight (:host github :repo "seagle0128/doom-modeline" :branch "master")
    :hook (after-init . doom-modeline-init))
#+END_SRC
*** No-Littering
Cleanliness is next to godliness.

No-littering keeps various packages (builtin or otherwise) from littering the file system with their mess.
Configuration-related files are sent to ".emacs.d/etc" and cache/temp files are banished to ".emacs.d/var".

Also exclude these files from showing up in recentf's listings.

#+BEGIN_SRC emacs-lisp
(use-package no-littering
 :demand t
 :config
 (progn
   (require 'no-littering)
   (require 'recentf)
   (setq no-littering-etc-directory "etc/")
   (setq no-littering-var-directory "var/")
   (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
   (add-to-list 'recentf-exclude no-littering-var-directory)
   (add-to-list 'recentf-exclude no-littering-etc-directory)))
#+END_SRC

*** Misc font-lock minor modes
On the syntax highlighting spectrum, I err more on the angry fruit-salad side of things.

Rainbow Delimiters make Lisps far more legible to me. Without it, I'm constantly spamming `%` to find matching parens.
It's still useful in other language families, particularly when there's a lot of anonymous functions or callbacks.
So I enable it for all programming modes.
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC
*** ElDoc
ElDoc is a built-in Emacs package for showing documentation for the the symbol at point.

But it dumps it in the echo area (underneath the modeline), which is too cramped for long
docstrings or type definitions, and bumps the modeline up all the time, which annoys me.

So, this package displays that information at point instead.
#+BEGIN_SRC emacs-lisp
(global-eldoc-mode -1)
(use-package eldoc-overlay
    :straight (:host github :repo "stardiviner/eldoc-overlay" :branch "master")
    :hook (prog-mode . eldoc-overlay-enable)
    :config
    (setq eldoc-overlay-backend 'posframe))
#+END_SRC

*** Which-key
Got to throw which-key in here because I can barely remember my own bindings as
well.

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :demand t
  :diminish which-key-mode
  :config
  (which-key-mode)
  (which-key-setup-side-window-bottom)
  (setq which-key-sort-order 'which-key-prefix-then-key-order)
  (setq which-key-popup-type 'side-window
        which-key-side-window-max-height 0.5
        which-key-side-window-max-width 0.33
        which-key-idle-delay 0.5
        which-key-min-display-lines 7))
(evil-collection-which-key-setup)
#+END_SRC

*** Ivy

#+BEGIN_SRC emacs-lisp
(use-package ivy
  :demand t
  :config
  ;; Escape from ivy-minibuffer in one press, not three. (???)
  (define-key ivy-minibuffer-map [escape] 'minibuffer-keyboard-quit)
  (setq ivy-height 15
        ivy-wrap t
        projectile-completion-system 'ivy
        ivy-initial-inputs-alist nil ;; Don't prefix everything with ^
        ivy-format-function #'ivy-format-function-line))
  
(use-package ivy-posframe
  :config
  (setq ivy-fixed-height-minibuffer nil
        ivy-display-functions-alist (append ivy-display-functions-alist
					'((swiper . nil)
					    (counsel-rg . nil)
					    (counsel-ag . nil)
					    (t . ivy-posframe-display-at-frame-center))))
  (ivy-posframe-enable))

(use-package ivy-rich
  :after ivy
  :config
  (ivy-set-display-transformer 'ivy-switch-buffer 'ivy-rich-switch-buffer-transformer)
  (setq ivy-virtual-abbreviate 'full
      ivy-rich-switch-buffer-align-virtual-buffer t))
#+END_SRC

*** Counsel
Counsel is a set of replacements for common Emacs commands, powered by Ivy.

Throw amx in here too -- it ranks M-x suggestions based on usage.
Counsel-M-x will make use of amx if it's present.
#+BEGIN_SRC emacs-lisp
(use-package counsel-projectile)
(use-package counsel
  :demand t)
(use-package amx
  :demand t)
#+END_SRC

*** Swiper

#+BEGIN_SRC emacs-lisp
(use-package swiper
  :commands (swiper swiper-all))
#+END_SRC

*** Treemacs

#+BEGIN_SRC emacs-lisp
(use-package treemacs
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (setq treemacs-collapse-dirs              (if (executable-find "python") 3 0)
        treemacs-file-event-delay           5000
        treemacs-follow-after-init          t
        treemacs-follow-recenter-distance   0.1
        treemacs-goto-tag-strategy          'refetch-index
        treemacs-indentation                2
        treemacs-indentation-string         " "
        treemacs-is-never-other-window      nil
        treemacs-no-png-images              t
        treemacs-project-follow-cleanup     nil
        treemacs-persist-file               (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
        treemacs-recenter-after-file-follow nil
        treemacs-recenter-after-tag-follow  nil
        treemacs-show-hidden-files          t
        treemacs-silent-filewatch           nil
        treemacs-silent-refresh             nil
        treemacs-sorting                    'alphabetic-desc
        treemacs-space-between-root-nodes   t
        treemacs-tag-follow-cleanup         t
        treemacs-tag-follow-delay           1.5
        treemacs-width                      35)
    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t))
(use-package treemacs-evil
  :after treemacs evil)

(use-package treemacs-projectile
  :after treemacs projectile)
#+END_SRC
*** Magit
The magical git client. Let's load magit only when one of the several entry pont
functions we invoke regularly outside of magit is called.

#+BEGIN_SRC emacs-lisp
(use-package magit
  :commands (magit-status magit-blame magit-log-buffer-file magit-log-all))
#+END_SRC

*** Projectile

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :demand t)
#+END_SRC

*** Company
#+BEGIN_SRC emacs-lisp
(use-package company
  :config
  (global-company-mode)
  (setq company-tooltip-limit 10)
  (setq company-dabbrev-downcase 0)
  (setq company-idle-delay 0.1)
  (setq company-echo-delay 0.1)
  (setq company-minimum-prefix-length 1)
  (setq company-require-match nil)
  (setq company-selection-wrap-around t)
  (setq company-tooltip-align-annotations t)
  (setq company-tooltip-flip-when-above t))
#+END_SRC
*** Language Server Protocol
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
    :hook (lsp-mode . lsp-ui-mode)
    :config
    (use-package lsp-ui
        :hook (lsp-ui-mode . (lambda () (setq-local eldoc-documentation-function #'ignore)))
	:config
	(setq lsp-ui-flycheck-live-reporting nil
	      lsp-ui-sideline-code-actions-prefix "💡 "
	      lsp-ui-sideline-ignore-duplicate t
              lsp-ui-sideline-show-symbol nil
              lsp-ui-sideline-delay 1.0
              lsp-ui-doc-include-signature t
              lsp-ui-doc-header nil))
    (use-package company-lsp
	:init
	(setq company-transformers nil ; no client-side filter, let LSP server do it
		company-lsp-async t ; force async requests from LSP
		company-lsp-cache-candidates 'auto)
	(push 'company-lsp company-backends)))
#+END_SRC
*** Org
Because Org is not designed to be run without running make first, and straight.el
does not yet support custom build steps for packages, it is possible to get
spurious warnings from an Org installed via straight.el.

Emacs also provides an outdated version of Org and there is no way to disable this.
This is a way to install Org via straight.el without getting any warnings and without
risking the outdated Org provided by Emacs from being loaded, as described on the
straight.el GitHub repo.

This hack basically provides the three things that Emacs' outdated version of Org
provides, and that a correctly built version of Org would provide, but that the unbuilt
version of Org installed by straight.el does not actually provide.

#+BEGIN_SRC emacs-lisp
(require 'subr-x)
(straight-use-package 'git)

(defun org-git-version ()
  "The Git version of org-mode.
Inserted by installing org-mode or when a release is made."
  (require 'git)
  (let ((git-repo (expand-file-name
                   "straight/repos/org/" user-emacs-directory)))
    (string-trim
     (git-run "describe"
              "--match=release\*"
              "--abbrev=6"
              "HEAD"))))

(defun org-release ()
  "The release version of org-mode.
Inserted by installing org-mode or when a release is made."
  (require 'git)
  (let ((git-repo (expand-file-name
                   "straight/repos/org/" user-emacs-directory)))
    (string-trim
     (string-remove-prefix
      "release_"
      (git-run "describe"
               "--match=release\*"
               "--abbrev=0"
               "HEAD")))))

(provide 'org-version)

(straight-use-package 'org-plus-contrib)
#+END_SRC

*** Toc-org
Let's install and load the =toc-org= package after org mode is loaded. This is the
package that automatically generates an up to date table of contents for us.
#+BEGIN_SRC emacs-lisp
(use-package toc-org
  :after org
  :init (add-hook 'org-mode-hook #'toc-org-enable))
#+END_SRC

*** Language & File Support
**** Bash
This setup uses Mads Hartmann's Bash Language Server, so install that.

#+BEGIN_SRC sh
npm install -g bash-language-server
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package lsp-sh
    :straight (:host github :repo "emacs-lsp/lsp-sh" :branch "master")
    :hook (sh-mode . lsp-sh-enable))
#+END_SRC

**** CSS
Use the language server from VSCode to give css-mode some brains.

#+BEGIN_SRC sh
npm install -g vscode-css-languageserver-bin
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package lsp-css
    :straight (:host github :repo "emacs-lsp/lsp-css" :branch "master")
    :config
    (defun my-css-mode-setup ()
	(when (eq major-mode 'css-mode)
	    ;; Only enable in strictly css-mode, not scss-mode (css-mode-hook
	    ;; fires for scss-mode because scss-mode is derived from css-mode)
	    (lsp-css-enable)))

    (require 'lsp-css)
    (add-hook 'css-mode-hook  #'my-css-mode-setup)
    (add-hook 'less-mode-hook #'lsp-less-enable)
    (add-hook 'sass-mode-hook #'lsp-scss-enable)
    (add-hook 'scss-mode-hook #'lsp-scss-enable))
#+END_SRC

**** Emacs Lisp
#+BEGIN_SRC emacs-lisp
(defun my-elisp-eldoc-function ()
"Wrap `elisp-eldoc-documentation-function` and enrich it with the first line of the function docstring"
    (let* ((fnsym (car (elisp--fnsym-in-current-sexp)))
	(doc-string (ignore-errors (documentation fnsym)))
	(doc-first-line (car (ignore-errors (split-string doc-string "\n")))))
	(if doc-first-line
	    (concat (elisp-eldoc-documentation-function) "\n\n" (symbol-name fnsym) ":\n" doc-first-line)
	    (or (elisp-eldoc-documentation-function) ""))))

(add-hook 'emacs-lisp-mode-hook
          (lambda ()
            (setq-local eldoc-documentation-function #'my-elisp-eldoc-function)))

(add-hook 'org-src-mode-hook
          (lambda ()
	    (when (eq major-mode 'emacs-lisp-mode)
              (setq-local eldoc-documentation-function #'my-elisp-eldoc-function))))
#+END_SRC
**** HTML
#+BEGIN_SRC sh
npm install -g vscode-html-languageserver-bin
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package lsp-html
    :straight (:host github :repo "emacs-lsp/lsp-html" :branch "master")
    :hook (html-mode lsp-html-enable)) 
#+END_SRC

**** TypeScript
TypeScript is a typed super-set of Javascript, so this config services both.

This config needs a TypeScript Language Server to work.

#+BEGIN_SRC sh
npm install -g typescript 
npm install -g javascript-typescript-langserver
npm install -g prettier 
npm install -g tslint 
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package typescript-mode
    :commands typescript-mode
    :mode "\\.\\(js\\|jsx\\|ts\\|tsx\\)\\'"
    :hook (typescript-mode . flycheck-mode))

(use-package add-node-modules-path
    :hook (typescript-mode . #'add-node-modules-path))
    
(use-package prettier-js
    :hook (typescript-mode . prettier-js-mode)
    :config (setq prettier-js-show-errors nil))
  
(use-package lsp-javascript-typescript
    :hook ((typescript-mode . lsp-mode) 
           (typescript-mode . lsp-javascript-typescript-enable))
    :config
    (defun lsp-prefix-company-transformer (candidates)
	(let ((completion-ignore-case t))
	(all-completions (company-grab-symbol) candidates)))
    (make-local-variable 'company-transformers)
    (add-to-list 'company-transformers 'lsp-prefix-company-transformer))
#+END_SRC


** Post Initialization

#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold 16777216
      gc-cons-percentage 0.1)
(defun display-startup-echo-area-message ()
(message "Initialization completed in %s." (emacs-init-time)))
#+END_SRC

